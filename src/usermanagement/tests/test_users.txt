usermanagement API
==================

  >>> from webtest import TestApp as WSGIApp
  >>> from usermanagement import make_api

  >>> class Overhead:
  ...     def __init__(self, engine, service, environ):
  ...         self.engine = engine
  ...         self.service = service
  ...         self.environ = environ

  >>> def make_overhead(engine, service=None):
  ...     def overhead(environ):
  ...         return Overhead(engine, service, environ)
  ...     return overhead

  >>> from cromlech.sqlalchemy import create_engine
  >>> engine = create_engine("sqlite://", "tests")
  >>> app = WSGIApp(make_api(overhead=make_overhead(engine)))


Error handling
--------------

  >>> response = app.get('/users', expect_errors=True)
  >>> assert response.status_int == 400

  >>> response = app.post('/users/schema', {'a': 1}, expect_errors=True)
  >>> assert response.status_int == 405

  >>> response = app.post(
  ...     '/users/create', '''{"a": 1}''',
  ...     expect_errors=True)
  >>> assert response.status_int == 406
  >>> assert response.body == b'Content type must be application/json'

  >>> response = app.put('/users/create', {'a': 1}, expect_errors=True)
  >>> assert response.status_int == 405


Schema
------

  >>> from usermanagement.users import user_schema
  >>> response = app.get('/users/schema')
  >>> assert response.body == bytes(user_schema.string, 'utf-8')


Create
------

Errors handling:

  >>> response = app.post(
  ...     '/users/create',
  ...     '''{"username": "cklinger"}''',
  ...     headers={'Content-Type': 'application/json'},
  ...     expect_errors=True)

  >>> assert response.json == {"__general__": ["Additional properties are not allowed ('username' was unexpected)"], "__missing__": ["'companyID' is a required property", "'name' is a required property", "'password' is a required property", "'surname' is a required property"]}


Full submit:

  >>> response = app.post(
  ...     '/users/create',
  ...     '''{"name": "Klinger", "surname": "Christian",
  ...         "password": "test", "companyID": "novareto"}''',
  ...     headers={'Content-Type': 'application/json'},
  ...     expect_errors=False)

  >>> assert response.status_int == 200
  >>> assert response.body == b'{"status": "ok"}'


Update
------

Errors handling:

  >>> response = app.put(
  ...     '/users/update/1',
  ...     '''{"username": "cklinger"}''',
  ...     headers={'Content-Type': 'application/json'},
  ...     expect_errors=True)

  >>> assert response.json == {"__general__": ["Additional properties are not allowed ('username' was unexpected)"], "__missing__": ["'companyID' is a required property", "'name' is a required property", "'password' is a required property", "'surname' is a required property"]}


Full submit:

  >>> response = app.put(
  ...     '/users/update/1',
  ...     '''{"name": "Klinger", "surname": "Christian",
  ...         "password": "test", "companyID": "novareto"}''',
  ...     headers={'Content-Type': 'application/json'},
  ...     expect_errors=False)

  >>> assert response.status_int == 200
  >>> response.body
  b'{"status": "ok", "updated_user": "1"}'


Fetch
-----

Errors handling:

  >>> response = app.get(
  ...     '/users/get',
  ...     expect_errors=True)

  >>> assert response.body == b"Couldn't match any action. Please consult the API documentation."


Providing an id:

  >>> response = app.get(
  ...     '/users/get/1',
  ...     expect_errors=False)

  >>> assert response.json == {"fetched_user": "1", "status": "ok"}
